generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model User {
  id           String         @id @default(cuid())
  email        String         @unique
  password     String
  name         String
  role         Role           @default(ADMIN)
  status       UserStatus     @default(ACTIVE)
  lastLogin    DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  logs         ActivityLog[]
  sales        Sale[]
  pharmacy     Pharmacy?      @relation(fields: [pharmacyId], references: [id])
  pharmacyId   String?
  prescriptions Prescription[]
  expenses     Expense[]
  permissions  UserPermission[]
}

model UserPermission {
  id        String   @id @default(cuid())
  module    PermissionModule
  canView   Boolean  @default(false)
  canEdit   Boolean  @default(false)
  canDelete Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pharmacy {
  id            String    @id @default(cuid())
  name          String    @unique
  licenseNumber String    @unique
  ownerName     String
  email         String    @unique
  phone         String
  location      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  users         User[]
  BackupSettings BackupSettings[]
  SecuritySettings SecuritySettings[]
  AlertSettings AlertSettings[]
  PharmacySettings PharmacySettings[]
}

model InventoryItem {
  id         String    @id @default(cuid())
  name       String
  category   String
  quantity   Int
  price      Float
  expiryDate DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  batch      String?
  sales      Sale[]
}

model Sale {
  id         String        @id @default(cuid())
  itemId     String
  quantity   Int
  totalPrice Float
  createdAt  DateTime      @default(now())
  userId     String
  item       InventoryItem @relation(fields: [itemId], references: [id])
  soldBy     User          @relation(fields: [userId], references: [id])
  prescriptionId String?  
  prescription   Prescription? @relation(fields: [prescriptionId], references: [id])
}

model ActivityLog {
  id        String       @id @default(cuid())
  type      ActivityType
  message   String
  createdAt DateTime     @default(now())
  userId    String
  user      User         @relation(fields: [userId], references: [id])
}

model Prescription {
  id          String   @id @default(cuid())
  patientName String
  age         Int
  gender      String
  doctor      String
  date        DateTime @default(now())
  status      PrescriptionStatus @default(PENDING)
  medications String[] 
  imageUrl    String? 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  sales       Sale[]
}



model Expense {
  id          String   @id @default(cuid())
  category    String
  amount      Float
  description String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model PharmacySettings {
  id            String   @id @default(cuid())
  name          String
  licenseNumber String
  phone         String
  email         String
  address       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  pharmacyId    String
  pharmacy      Pharmacy @relation(fields: [pharmacyId], references: [id])
}

model AlertSettings {
  id                 String   @id @default(cuid())
  lowStockThreshold  Int      @default(10)
  expiryAlertDays    Int      @default(30)
  emailNotifications Boolean  @default(true)
  smsNotifications   Boolean  @default(false)
  dailyReports       Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  pharmacyId         String
  pharmacy           Pharmacy @relation(fields: [pharmacyId], references: [id])
}

model SecuritySettings {
  id                  String   @id @default(cuid())
  sessionTimeout      Int      @default(30)
  passwordPolicy      String   @default("medium")
  twoFactorAuth       Boolean  @default(false)
  auditLogging        Boolean  @default(true)
  ipRestrictions      Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  pharmacyId          String
  pharmacy            Pharmacy @relation(fields: [pharmacyId], references: [id])
}

model BackupSettings {
  id                String   @id @default(cuid())
  backupFrequency   String   @default("daily")
  automaticBackups  Boolean  @default(true)
  lastBackup        DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  pharmacyId        String
  pharmacy          Pharmacy @relation(fields: [pharmacyId], references: [id])
}





enum ExpenseCategory {
  SALARIES
  RENT
  UTILITIES
  INSURANCE
  MARKETING
  MAINTENANCE
  LICENSES
  OTHER
}


enum PrescriptionStatus {
  PENDING
  DISPENSED
  COMPLETED
}

enum Role {
  ADMIN
  WORKER
  PHARMACIST
  TECHNICIAN
  CASHIER
  ASSISTANT
}

enum ActivityType {
  LOGIN
  LOGOUT
  ADD_STOCK
  UPDATE_STOCK
  DELETE_STOCK
  SALE
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum PermissionModule {
  INVENTORY
  SALES
  PRESCRIPTIONS
  REPORTS
  USERS
  SETTINGS
}